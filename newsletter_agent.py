from app import NewsResearchAssistant
import openai
from datetime import datetime
import json
import markdown
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

class NewsletterAgent:
    def __init__(self, exa_api_key, openai_api_key):
        self.research_assistant = NewsResearchAssistant(exa_api_key, openai_api_key)
        self.openai_api_key = openai_api_key
        openai.api_key = openai_api_key
        
    def generate_newsletter_sections(self, topics):
        """Generate newsletter content for multiple topics."""
        newsletter_sections = []
        
        for topic in topics:
            articles = self.research_assistant.research(topic, num_articles=5)
            
            # Generate section analysis using GPT
            article_texts = [f"Title: {a['title']}\nSummary: {a['summary']}" 
                           for a in articles]
            
            analysis = self._generate_topic_analysis(topic, article_texts)
            
            newsletter_sections.append({
                "topic": topic,
                "analysis": analysis,
                "articles": articles
            })
            
        return newsletter_sections
    
    def _generate_topic_analysis(self, topic, article_texts):
        """Generate an analytical overview of the topic using GPT."""
        combined_text = "\n\n".join(article_texts)
        
        prompt = f"""Analyze the following articles about {topic} and provide:
        1. Key trends and patterns
        2. Important developments
        3. Potential implications
        Make it engaging and insightful for newsletter readers.
        
        Articles:
        {combined_text}
        """
        
        completion = openai.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are an expert newsletter writer and analyst."},
                {"role": "user", "content": prompt}
            ]
        )
        return completion.choices[0].message.content
    
    def format_newsletter(self, sections, template="default"):
        """Format the newsletter content in markdown."""
        current_date = datetime.now().strftime("%B %d, %Y")
        
        newsletter_md = f"""
# AI Research Newsletter
## {current_date}

Dear Subscriber,

Here's your curated AI research update for today.

---
"""
        
        for section in sections:
            newsletter_md += f"""
## {section['topic']}

{section['analysis']}

### Featured Articles:
"""
            
            for article in section['articles']:
                newsletter_md += f"""
* [{article['title']}]({article['url']})
  * {article['summary']}
"""
            
            newsletter_md += "\n---\n"
            
        newsletter_md += """
*This newsletter is generated by AI to help you stay updated with the latest developments.*

To unsubscribe, click [here](#).
"""
        return newsletter_md
    
    def send_newsletter(self, newsletter_content, email_config):
        """Send the newsletter via email."""
        msg = MIMEMultipart('alternative')
        msg['Subject'] = f"AI Research Newsletter - {datetime.now().strftime('%B %d, %Y')}"
        msg['From'] = email_config['from_email']
        msg['To'] = email_config['to_email']
        
        # Convert markdown to HTML
        html_content = markdown.markdown(newsletter_content)
        
        # Attach both plain text and HTML versions
        msg.attach(MIMEText(newsletter_content, 'plain'))
        msg.attach(MIMEText(html_content, 'html'))
        
        # Send email
        with smtplib.SMTP_SSL(email_config['smtp_server'], email_config['smtp_port']) as server:
            server.login(email_config['username'], email_config['password'])
            server.send_message(msg)

    def save_newsletter(self, newsletter_content, filename=None):
        """Save the newsletter to a file."""
        if filename is None:
            filename = f"newsletter_{datetime.now().strftime('%Y%m%d')}.md"
        
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(newsletter_content)
        
        return filename 